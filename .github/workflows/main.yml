name: Update IP List (Optimized)

on:
  # 定时触发：每天0点和12点各运行一次
  schedule:
    - cron: '0 0,12 * * *'
  # 手动触发
  workflow_dispatch:
  # 代码提交触发（可选，取消注释后启用）
  # push:
  #   branches:
  #     - main

jobs:
  update-ip-list:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
      with:
        # 允许写入仓库（用于推送更改）
        persist-credentials: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        # 缓存Python依赖，加速后续运行
        cache: 'pip'
        cache-dependency-path: requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing basic dependencies..."
          pip install requests beautifulsoup4
        fi
      # 缓存依赖，避免重复安装
      env:
        PYTHONUSERBASE: ${{ github.workspace }}/.local
      shell: bash
    
    - name: Run IP collection script
      run: |
        # 确保脚本路径正确
        if [ -f "${{ github.workspace }}/collect_ips.py" ]; then
          python "${{ github.workspace }}/collect_ips.py"
        else
          echo "Error: collect_ips.py not found in the repository!"
          exit 1
        fi
      env:
        # 可添加环境变量供脚本使用
        LOG_LEVEL: INFO
    
    - name: Commit and push changes
      run: |
        # 配置Git用户信息（建议使用仓库secret存储敏感信息）
        git config --global user.email ${{ secrets.GIT_EMAIL || "lisxy102@gmail.com" }}
        git config --global user.name ${{ secrets.GIT_NAME || "lisxy" }}
        
        # 检查文件变化
        CHANGED_FILES=$(git status --porcelain ip.txt)
        if [ -n "$CHANGED_FILES" ]; then
          echo "Detected changes in ip.txt"
          git add ip.txt
          # 生成带时间戳的提交信息
          git commit -m "Automatic update: $(date +'%Y-%m-%d %H:%M:%S')"
          
          # 处理推送错误
          PUSH_ATTEMPTS=0
          MAX_ATTEMPTS=2
          while [ $PUSH_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            if git push; then
              echo "Push successful."
              break
            else
              PUSH_ATTEMPTS=$((PUSH_ATTEMPTS + 1))
              if [ $PUSH_ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "Push attempt $PUSH_ATTEMPTS failed, trying again..."
              else
                echo "Push failed after $MAX_ATTEMPTS attempts, giving up."
                exit 1
              fi
            fi
          done
        else
          echo "No changes in ip.txt, skipping commit."
        fi
      # 确保Git能访问远程仓库
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: update-ip-list
    if: needs.update-ip-list.result == 'failure'
    steps:
      - name: Send failure notification
        run: |
          echo "The 'update-ip-list' job has failed."
          # 这里可以添加更多的通知逻辑，如发送邮件、Slack消息等
